-module(ole_store_test).

-export([
    catch_messages/2, test/0
]).

catch_messages(Buffer, CheckAgainst) ->
    receive
        {content_length, _CL} ->
            catch_messages(Buffer, CheckAgainst);
        {stream_body, SB} ->
            catch_messages(<<Buffer/binary, SB/binary>>, CheckAgainst);
        {stream_end} ->
            {buffer, Buffer} = {buffer, CheckAgainst},
            lager:info("OK\n");
        Hmph ->
            lager:info("Error: ~w\n", [Hmph])
    end.

test() ->
    ByteSize = 100,
    lager:info(
        "\ngenerating random inputs of ~s (and 10x) bytes: ", 
        [integer_to_list(ByteSize)]
    ),
    RandomData = lists:map(
        fun (_) -> random:uniform(90)+$\s+1 end, lists:seq(1,ByteSize)
    ),
    RandomData2 = lists:map(
        fun (_) -> random:uniform(90)+$\s+1 end, lists:seq(1,ByteSize*10)
    ),
    lager:info("OK\n"),

    lager:info("set_data: "),
    {stored_location, SetDataLocation} = ole_store_server:set_data(RandomData),
    lager:info("OK\n"),

    lager:info("get_data: "),
    {content, GetDataContent} = ole_store_server:get_data(SetDataLocation),
    lager:info("OK\n"),

    lager:info("matching set_data and get_data: "),
    RandomData = binary_to_list(GetDataContent),
    lager:info("OK\n"),

    lager:info("update_data: "),
    {{stored_location, UpdateContentLocation}, {backup_location, BackupLocation}} = 
        ole_store_server:update_data(RandomData2, SetDataLocation),
    lager:info("OK\n"),

    lager:info("matching update and set_data location: "),
    UpdateContentLocation = SetDataLocation,
    lager:info("OK\n"),

    lager:info("backup_loction has data: "),
    {content, BackupContent} = ole_store_server:get_data(BackupLocation),
    lager:info("OK\n"),

    lager:info("backup_loction matches old_data: "),
    RandomData = binary_to_list(BackupContent),
    lager:info("OK\n"),

    lager:info("matching update_data and newly set data: "),
    {content, SecondGetData} = ole_store_server:get_data(SetDataLocation),
    RandomData2 = binary_to_list(SecondGetData),
    lager:info("OK\n"),

    lager:info("testing streaming (small data): "),
    CM = spawn(?MODULE, catch_messages, [<<>>, GetDataContent]),
    ole_store_server:get_stream(BackupLocation, CM),
    timer:sleep(1000), % allow 1 seconds for streaming

    lager:info("testing streaming (large data): "),
    CM2 = spawn(?MODULE, catch_messages, [<<>>, SecondGetData]),
    ole_store_server:get_stream(UpdateContentLocation, CM2),
    timer:sleep(1000), % allow 1 seconds for streaming

    lager:info("delete (~s): ", [SetDataLocation]),
    {deleted, DeletedLocationOne} = ole_store_server:delete_data(SetDataLocation),
    DeletedLocationOne = SetDataLocation,
    lager:info("OK\n"),

    lager:info("delete (~s): ", [BackupLocation]),
    {deleted, DeletedLocationTwo} = ole_store_server:delete_data(BackupLocation),
    DeletedLocationTwo = BackupLocation,
    lager:info("OK\n"),

    ProcessCount = 10,
    lager:info("Concurrent ~w: ", [ProcessCount]),
    {V2, _J2} = timer:tc(
        fun() -> 
            plists:pmap(
                fun(_) -> 
                    ole_store_server:set_data(RandomData2) 
                end, 
                lists:seq(1, ProcessCount)
            )
        end
    ),
    lager:info("OK: ~w seconds per write (~w)\n", [((V2/1000000)/ProcessCount), V2]),

    lager:info("- Horrible, Science-Free Testing Below\n"),
    lager:info("Serial ~w: ", [ProcessCount]),
    {V, _J} = timer:tc(
        fun() -> 
                [ole_store_server:set_data(RandomData2) || 
                    _ <- lists:seq(1,ProcessCount)
                ] 
        end
    ),
    lager:info("OK: ~w seconds per write\n", [((V/1000000)/ProcessCount)]),
    ok.
