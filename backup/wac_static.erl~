-module(wac_static).
-export([init/1, allowed_methods/2,
        content_types_provided/2, resource_exists/2, last_modified/2, provide_content/2, generate_etag/2, expires/2, variances/2]).
%-export([encodings_provided/2]).

-include_lib("webmachine/include/webmachine.hrl").
-include_lib("kernel/include/file.hrl").
-record(context, {docroot,fullpath,fileinfo}).

init(DocRoot) -> {ok, #context{docroot=DocRoot}}.

resource_exists(ReqData, State) ->
    case get_full_path(State#context.docroot, wrq:disp_path(ReqData)) of
        undefined -> {false, ReqData, State};
        Path ->
            case filelib:is_regular(Path) of
                true ->
                    case file:read_file_info(Path) of
                        {ok, FileInfo} ->
                            {true, ReqData, State#context{fileinfo=FileInfo}};
                        {error, _} ->
                            {false, ReqData, State}
                    end;
                _ -> {false, ReqData, State}
            end
    end.

content_types_provided(ReqData, State) ->
    Path = get_full_path(State#context.docroot, wrq:disp_path(ReqData)),
    {[{webmachine_util:guess_mime(Path), provide_content}], ReqData, State#context{fullpath=Path}}.

allowed_methods(ReqData, State) -> {['HEAD', 'GET'], ReqData, State}.

last_modified(ReqData, State) ->
    {(State#context.fileinfo)#file_info.mtime, ReqData, State}.

provide_content(ReqData, State) ->
    {ok, Value} = file:read_file(State#context.fullpath),
    {Value, ReqData, State}.

get_full_path(DocRoot, Path) ->
    case mochiweb_util:safe_relative_path(Path) of
        undefined -> undefined;
        RelPath ->
            FullPath = filename:join([DocRoot, RelPath]),
            case filelib:is_dir(FullPath) of
                true ->
                    filename:join([FullPath, "index.html"]);
                false ->
                    FullPath
            end
    end.

generate_etag(ReqData, State) ->
    case file:read_file(get_full_path(State#context.docroot, wrq:disp_path(ReqData))) of
        {ok, Data} -> {mochihex:to_hex(crypto:md5(Data)), ReqData, State};
        {error, _Reason} -> {mochihex:to_hex(crypto:md5(calendar:datetime_to_gregorian_seconds(calendar:local_time()))), ReqData, State}
    end.

expires(ReqData, State) -> {{{2021,1,1},{0,0,0}}, ReqData, State}.

variances(ReqData, State) -> {["Accept-Encoding"], ReqData, State}.

%encodings_provided(ReqData, State) -> {[{"gzip", fun(X) -> zlib:gzip(X) end}], ReqData, State}.
