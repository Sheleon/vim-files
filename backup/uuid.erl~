-module(uuid).
-export([v4/0, to_string/1, to_short_safe_string/0, get_parts/1]).
-import(random).

v4() ->
    {A1,A2,A3} = now(),
    random:seed(A1, A2, A3),
    v4(
        random:uniform(round(math:pow(2, 48))) - 1,
        random:uniform(round(math:pow(2, 12))) - 1,
        random:uniform(round(math:pow(2, 32))) - 1,
        random:uniform(round(math:pow(2, 30))) - 1
    ).
v4(R1, R2, R3, R4) ->
    <<R1:48, 4:4, R2:12, 2:2, R3:32, R4: 30>>.

to_string(U) ->
    lists:flatten(io_lib:format("~8.16.0b-~4.16.0b-~4.16.0b-~2.16.0b~2.16.0b-~12.16.0b", get_parts(U))).

to_short_safe_string() ->
    binary_to_list(
        bin_replace(
            bin_replace(
                bin_replace(
                    base64:encode(v4()), <<"==">>, <<>>
                ), <<"+">>, <<"-">>
            ), <<"/">>, <<"_">>
        )
    ).

get_parts(<<TL:32, TM:16, THV:16, CSR:8, CSL:8, N:48>>) ->
    [TL, TM, THV, CSR, CSL, N].

bin_replace(What, From, To) -> 
    bin_replace(What, byte_size(From), What, From, To, 0).

bin_replace(WhatOrig, FromLen, What, From, To, Cnt) ->
    case What of
        <<From:FromLen/binary, Right/binary>> ->
            OtherRepl = bin_replace(Right, From, To),
            <<Left:Cnt/binary,_/binary>> = WhatOrig,
            <<Left/binary, To/binary, OtherRepl/binary>>;

        <<_:8, Other/binary>> ->
            bin_replace(WhatOrig, FromLen, Other, From, To, Cnt+1);

        <<>> ->
            WhatOrig
    end.
