-module(ole_cache_server).
-behaviour(gen_server).
-record(ole_cache_item, {key, value}). % rd(ole_cache_item, {key, value}).
-define(WAIT_FOR_TABLES, 5000).

-export([
    put/2, get/1, remove/1, safe_get/1, lock/1, unlock/1,
    start_link/0, init/1, handle_call/3, handle_cast/2,
    handle_info/2, terminate/2, code_change/3
]).

start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

put(Key, Value) ->
    gen_server:call(?MODULE, {put, Key, Value}).

get(Key) ->
    gen_server:call(?MODULE, {get, Key}).

lock(Key) ->
    gen_server:call(?MODULE, {lock, Key}).

unlock(Key) ->
    gen_server:call(?MODULE, {unlock, Key}).

safe_get(Key) ->
    gen_server:call(?MODULE, {get, Key}).

remove(Key) ->
    gen_server:call(?MODULE, {remove, Key}).

init(_) ->
    mnesia:stop(),
    mnesia:delete_schema([node()]),
    mnesia:start(),
    dynamic_db_init(
        lists:delete(
            ole_cache:get_keystone(),
            lists:delete(node(), nodes())
        )
    ),
    {ok, []}.

dynamic_db_init([]) ->
    mnesia:create_table(
        ole_cache_item, [{attributes, record_info(fields, ole_cache_item)} ]
    );
dynamic_db_init(CacheNodes) ->
    add_extra_nodes(CacheNodes).

add_extra_nodes([Node|T]) ->
    case mnesia:change_config(extra_db_nodes, [Node]) of
        {ok, [Node]} ->
            mnesia:add_table_copy(schema, node(), ram_copies),
            mnesia:add_table_copy(ole_cache_item, node(), ram_copies),
            Tables = mnesia:system_info(tables),
            mnesia:wait_for_tables(Tables, ?WAIT_FOR_TABLES);
        _ ->
            add_extra_nodes(T)
    end.

handle_cast(stop, State) ->
    {stop, normal, State}.

handle_call({unlock, Key}, _From, State) ->
    F = fun() ->
            case mnesia:read(ole_cache_item, Key) of
                [] ->
                    {not_locked};
                [#ole_cache_item{value = _OldValue}] ->
                    mnesia:delete({ole_cache_item, Key}),
                    {unlocked}
            end
        end,
    {atomic, Result} = mnesia:transaction(F),
    {reply, Result, State};
handle_call({lock, Key}, _From, State) ->
    Rec = #ole_cache_item{key = Key, value = locked},
    F = fun() ->
            case mnesia:read(ole_cache_item, Key) of
                [] ->
                    mnesia:write(Rec),
                    {locked};
                [#ole_cache_item{value = _OldValue}] ->
                    {already_locked}
            end
        end,
    {atomic, Result} = mnesia:transaction(F),
    {reply, Result, State};
handle_call({put, Key, Value}, _From, State) ->
    Rec = #ole_cache_item{key = Key, value = Value},
    F = fun() ->
            case mnesia:read(ole_cache_item, Key) of
                [] ->
                    mnesia:write(Rec),
                    ok;
                [#ole_cache_item{value = OldValue}] ->
                    mnesia:write(Rec),
                    {replaced, OldValue}
            end
        end,
    {atomic, Result} = mnesia:transaction(F),
    {reply, Result, State};
handle_call({get, Key}, _From, State) ->
    case mnesia:dirty_read({ole_cache_item, Key}) of
        [#ole_cache_item{value = Value}] -> {reply, Value, []};
        _ -> {reply, {not_found}, State}
    end;
handle_call({safe_get, Key}, _From, State) ->
    F = fun() ->
            mnesia:read({ole_cache_item, Key})
    end,
    {atomic, Value}  = mnesia:transaction(F),
    case Value of 
        [#ole_cache_item{value = Value}] -> {reply, Value, []};
        _ -> {reply, {not_found}, State}
    end;
handle_call({remove, Key}, _From, State) ->
    F = fun() ->
            case mnesia:read(ole_cache_item, Key) of
                [] -> {not_found};
                [#ole_cache_item{value = Value}] ->
                    mnesia:delete({ole_cache_item, Key}),
                    Value
            end
        end,
    {atomic, Result} = mnesia:transaction(F),
    {reply, Result, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    application:stop(mnesia).

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.
