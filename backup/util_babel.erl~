%% From anything to anything
-module(util_babel).
-export([to_list/1, to_atom/1, to_binary/1, to_bitstring/1, to_existing_atom/1,
        to_float/1, to_integer/1, to_pid/1, to_tuple/1, tests/0]).

to_list(S) when is_list(S) ->
    lists:flatten(S);
to_list(B) when is_binary(B) ->
    binary_to_list(B);
to_list(A) when is_atom(A) ->
    atom_to_list(A);
to_list(F) when is_float(F) ->
    float_to_list(F);
to_list(I) when is_integer(I) ->
    integer_to_list(I);
to_list(P) when is_pid(P) ->
    pid_to_list(P);
to_list(T) when is_tuple(T) ->
    tuple_to_list(T).

to_atom(X) ->
    try 
        to_existing_atom(X)
    catch
        _:_ -> list_to_atom(to_list(X))
    end.

to_binary(X) ->
    list_to_binary(to_list(X)).

to_bitstring(X) ->
    list_to_bitstring(to_list(X)).

to_existing_atom(X) ->
    list_to_existing_atom(to_list(X)).

to_float(X) ->
    list_to_float(to_list(X)).

to_integer(X) ->
    list_to_integer(to_list(X)).

to_pid(X) ->
    list_to_pid(to_list(X)).

to_tuple(X) ->
    list_to_tuple(to_list(X)).

tests() ->
    {tests, [
        {what_could_go_wrong, ok}
    ]}.
