-module(winamp_stats_server).
-behaviour(gen_server).

-export([
    init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3,
    start_link/0, handle_http/1
]).

start_link() ->
    gen_server:start_link(?MODULE, [], []).

init([]) ->
    crypto:start(),
    emysql:start(),
    emysql:add_pool(stats_pool, 1, "web", "f00", "o2d2", 3306, "Statistics", utf8),
    {ok, []}.

handle_call(_Request, _From, State) ->
    {reply, undefined, State}.

handle_cast(_Msg, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    terminated.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

handle_http(Req) ->
    handle(Req:get(method), Req:resource([lowercase, urldecode]), Req).

% omitted 
% -- by client version
% -- format % versus total
% 
handle('GET', ["reportrange", Country, Year, Month, Day, Year2, Month2, Day2], Req) ->
    Result = emysql:execute(stats_pool, <<"SELECT * FROM downgrades LIMIT 10">>),
    R = "Go",
    Req:ok(R);
handle('GET', ["report", Country, Year, Month, Day], Req) ->
    Req:ok("Use Country/Year/Month/Day/Year/Month/Day");
handle(_,_,Req) ->
    % we assume we got an stats packet
    add_stats(Req),
    Req:ok("yey, success!").

find_in_params(Var, Params, _AtomName) ->
    case proplists:get_value(Var, Params) of 
        undefined -> [];
        X -> 
            case string:left(Var, 2) of
                %"st" -> {AtomName, list_to_integer(X)};
                "st" -> list_to_integer(X);
                %_ -> {AtomName, X}
                _ -> X
            end
    end.

get_ip_info(Req) ->
    Params = Req:parse_qs(),
    Country = case proplists:get_value("overrideip", Params) of
        undefined -> 
            ip_to_country_server:get_country(Req:get(peer_addr));
        "1" -> 
            Ip = find_in_params("ip", Params, ip),
            {match, M} = re:run(
                Ip,
                % StartVer,EndVer,Country,Msg
                "(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)",
                [global,{capture,[1,2,3,4],list}]
            ),
            [[Ip1, Ip2, Ip3, Ip4]] = M,
            ip_to_country_server:get_country({Ip1, Ip2, Ip3, Ip4})
    end,
    lager:debug("~w", [Country]),
    {"192.1.1.1", "U.S.A"}.

get_log_time(Params) ->
    case proplists:get_value("overridetime", Params) of
        undefined -> 
            {{Ye,Mo,Da},{Ho,Mi,Se}} = erlang:localtime(),
            Year = Ye,
            Month = Mo,
            Day = Da,
            Hour = Ho,
            Min = Mi,
            Sec = Se;
        "1" ->
            Year = find_in_params("ye", Params, year),
            Month = find_in_params("mo", Params, month),
            Day = find_in_params("da", Params, day),
            Hour = find_in_params("ho", Params, hour),
            Min = find_in_params("mi", Params, minute),
            Sec = find_in_params("se", Params, second)
    end,
    {Year,Month,Day,Hour,Min,Sec}.

get_log_version(Params) ->
    case proplists:get_value("V", Params) of 
        undefined -> case proplists:get_value("v", Params) of 
                undefined -> [];
                RealV -> RealV
        end;
        V -> V
    end.

is_loggable(Params) ->
    case proplists:get_value("ID", Params) of 
        undefined -> false;
        _ -> true
    end.

add_stats(Req) ->
    Params = Req:parse_qs(),
    case is_loggable(Params) of
        true ->
            {_Ip, _Country} = get_ip_info(Req),
            {Year,Month,Day,Hour,Min,Sec} = get_log_time(Params),
            Version = get_log_version(Params),
            ID = find_in_params("ID", Params, id),
            Launches = find_in_params("st1", Params, launches),
            TimeRunning = find_in_params("st2", Params, timerunning),
            TimeVisible = find_in_params("st3", Params, timevisible),
            TimePlaying = find_in_params("st4", Params, timeplaying),
            TimeInMinibrowser = find_in_params("st5", Params, timeinminibrowser),
            TimeVisiblePlaying = find_in_params("st6", Params, timevisibleplaying),
            TimeInMinibrowserPlayer = find_in_params("st7", Params, timeinminibrowserplayer),
            FilesPlayed = find_in_params("st8", Params, filesplayed),
            CdsPlayed = find_in_params("st9", Params, cdsplayed),
            StreamsPlayed = find_in_params("st10", Params, streamsplayed),
            VideosPlayed = find_in_params("st11", Params, videosplayed),
            LibrarySize = find_in_params("st12", Params, librarysize),
            RegisteredVersion = find_in_params("st13", Params, registeredversion),
            PlaylistEditorCount = find_in_params("st14", Params, playlisteditorcount),
            PlaylistCount = find_in_params("st15", Params, playlistcount),
            PodcastCount = find_in_params("st16", Params, podcastcount),
            PortableMediaPlayerTransferCount =
                find_in_params("st17", Params, portablemediaplayertransfercount),
            ReplaygainCount = find_in_params("st18", Params, replaygaincount),
            TranscodeCount = find_in_params("st19", Params, transcodecount),
            TranscodeFormat = find_in_params("st20", Params, transcodeformat),
            RipCount = find_in_params("st21", Params, ripcount),
            RipFormat = find_in_params("st22", Params, ripformat),
            AviAudioFormat = find_in_params("st23", Params, aviaudioformat),
            AviVideoFourcc = find_in_params("st24", Params, avivideofourcc),
            BookmarkCount = find_in_params("st25", Params, bookmarkcount),
            PlayListGeneratorCount = find_in_params("st26", Params, playlistgeneratorcount),
            Skin = find_in_params("skin", Params, skin),
            Colortheme = find_in_params("ct", Params, colortheme),
            Language = find_in_params("lang", Params, language),
            PortableMediaPlayer = find_in_params("pmp", Params, portablemediaplayer),
            UserId = lists:flatten("lu:"++uuid:to_short_safe_string(ID)),
            lager:debug("Storing ~w", [UserId]),
            DataBlock = [
                ID, Year, Month, Day, Hour, Min, Sec, Version, Launches, TimeRunning,
                TimeVisible, TimePlaying, TimeInMinibrowser, TimeVisiblePlaying,
                TimeInMinibrowserPlayer, FilesPlayed, CdsPlayed, StreamsPlayed,
                VideosPlayed, LibrarySize, RegisteredVersion, PlaylistEditorCount,
                PlaylistCount, PodcastCount, PortableMediaPlayerTransferCount,
                ReplaygainCount, TranscodeCount, TranscodeFormat, RipCount, RipFormat,
                AviAudioFormat, AviVideoFourcc, BookmarkCount, PlayListGeneratorCount,
                Skin, Colortheme, Language, PortableMediaPlayer
            ],
            ok = dets:insert(winamp_stats, {UserId, DataBlock}),
            MinStamp = lists:flatten(
                "lm:"++
                string:right(integer_to_list(Year), 4, $0)++
                string:right(integer_to_list(Month), 2, $0)++
                string:right(integer_to_list(Day), 2, $0)++
                string:right(integer_to_list(Hour), 2, $0)++
                string:right(integer_to_list(Min), 2, $0)
            ),
            lager:debug("MinStamp: ~w (with ~w)", [MinStamp, UserId]),
            ok = dets:insert(winamp_stats, {MinStamp, UserId});
        false ->
            lager:info("Unloggable!")
    end,
    ok.
